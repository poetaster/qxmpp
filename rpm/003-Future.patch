diff --git a/src/base/QXmppFutureUtils_p.h b/src/base/QXmppFutureUtils_p.h
index 95150008..b522cea7 100644
--- a/src/base/QXmppFutureUtils_p.h
+++ b/src/base/QXmppFutureUtils_p.h
@@ -25,7 +25,8 @@
 #include <QFutureWatcher>
 #include <QObject>
 
-namespace QXmpp::Private {
+namespace QXmpp {
+namespace Private {
 
 // helper for std::visit
 template<class... Ts>
@@ -241,6 +242,7 @@ static auto taskFromFuture(QFuture<T> &&future) -> QXmppTask<T>
     return promise.task();
 }
 
-}  // namespace QXmpp::Private
+}  // namespace Private
+}  // namespace QXmpp
 
 #endif  // QXMPPFUTUREUTILS_P_H
diff --git a/src/base/QXmppHashing_p.h b/src/base/QXmppHashing_p.h
index aa8566b2..f6144df1 100644
--- a/src/base/QXmppHashing_p.h
+++ b/src/base/QXmppHashing_p.h
@@ -19,7 +19,8 @@ template<typename T>
 class QFuture;
 class QXmppHash;
 
-namespace QXmpp::Private {
+namespace QXmpp {
+namespace Private {
 
 struct HashingResult
 {
@@ -66,6 +67,7 @@ uint16_t hashPriority(HashAlgorithm algorithm);
 QXMPP_EXPORT QFuture<HashingResultPtr> calculateHashes(std::unique_ptr<QIODevice> data, std::vector<HashAlgorithm> hashes);
 QFuture<HashVerificationResultPtr> verifyHashes(std::unique_ptr<QIODevice> data, std::vector<QXmppHash> hashes);
 
-}  // namespace QXmpp::Private
+}  // namespace Private
+}  // namespace QXmpp
 
 #endif  // QXMPPHASHING_H
diff --git a/src/base/QXmppPubSubIq_p.h b/src/base/QXmppPubSubIq_p.h
index c8828579..8a86e93c 100644
--- a/src/base/QXmppPubSubIq_p.h
+++ b/src/base/QXmppPubSubIq_p.h
@@ -19,7 +19,8 @@ class QXmppPubSubSubscription;
 class QXmppPubSubAffiliation;
 class QXmppResultSetReply;
 
-namespace QXmpp::Private {
+namespace QXmpp {
+    namespace Private {
 
 class PubSubIqPrivate;
 
@@ -152,7 +153,7 @@ void PubSubIq<T>::parseItems(const QDomElement &queryElement)
          childElement = childElement.nextSiblingElement(QStringLiteral("item"))) {
         T item;
         item.parse(childElement);
-        m_items << std::move(item);
+        m_items.push_back(std::move(item));
     }
 }
 
@@ -165,6 +166,7 @@ void PubSubIq<T>::serializeItems(QXmlStreamWriter *writer) const
 }
 /// \endcond
 
-}  // namespace QXmpp::Private
+}  // namespace Private
+}  // namespace QXmpp
 
 #endif  // QXMPPPUBSUBIQ_H
